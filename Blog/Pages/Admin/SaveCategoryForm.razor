@using Blog.Data.Entities
@using Blog.Services
@using Blog.ViewModel
@inject CategoryService CategoryService

<EditForm Model="category" OnValidSubmit="SaveCategoryAsync">
  <DataAnnotationsValidator />
  <div class="card">
    <div class="card-header">
      Lưu Danh Mục Bài Viết
    </div>
    <div class="card-body">
      @* label, textbox(input) *@
      <div class="mb-3">
        <label class="form-label">
          Tên Danh Mục Bài Viết:
        </label>
        <InputText class="form-control"
                   placeholder="Nhập Danh Mục Bài Viết"
                   @bind-Value="category.Name" />
        <ValidationMessage For="()=> category.Name" />
      </div>

      <div class="mb-3">
        <label class="form-label">
          Slug:
        </label>
        <InputText class="form-control"
                   placeholder="Nhập Slug"
                   @bind-Value="category.Slug" />
        <ValidationMessage For="() => category.Slug" />
      </div>

    </div>
    <div class="card-footer">
      <button class="btn btn-success" @onclick="CloseFormAsync">Thoát</button>
      <button type="submit" class="btn btn-success">Lưu</button>
    </div>
  </div>
</EditForm>

@code {
  [Parameter]
  public Category Category { get; set; }

  public EventCallback<MethodResult> OnSaveCategory { get; set; }

  [Parameter]
  public EventCallback OnCloseForm { get; set; }

  private Category category = new();
  protected override void OnParametersSet()
  {
    base.OnParametersSet();
    category = Category;
  }

  private async Task SaveCategoryAsync()
  {
    // OnSaveCategory
    MethodResult result = await CategoryService.SaveCategoryAsync(category);

    if (result.Status)
    {
      category = new();
    }
    await OnSaveCategory.InvokeAsync(result);
  }

  private async Task CloseFormAsync()
  {
    category = new();
    // OnCloseForm
    await OnCloseForm.InvokeAsync();
  }

}
